<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context.xsd  
  http://www.springframework.org/schema/mvc  
  http://www.springframework.org/schema/mvc/spring-mvc.xsd
  http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop.xsd
  http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx.xsd">
  
  <!-- 自动扫描 -->
	<context:component-scan base-package="com.lyz.*" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/> 
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> 
	 </context:component-scan>
  
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
       <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db1.jdbc.url}" /> 
       <property name="username" value="${db.login.name}"></property>
       <property name="password" value="${db.login.password}" />
       <property name="filters"  value="${db.filters}"></property>
       <property name="maxActive" value="${db.pool.maxActive}"></property>
       <property name="initialSize" value="${db.pool.initialSize}"></property>
       <property name="minIdle" value="${db.pool.minIdle}"></property>
       <property name="maxWait" value="${db.maxWait}"></property>    
       <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>
       <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>
       <property name="validationQuery" value="${db.validationQuery}"></property>
       <property name="testWhileIdle" value="${db.testWhileIdle}"></property>
       <property name="testOnBorrow" value="${db.testOnBorrow}"></property>
       <property name="testOnReturn" value="${db.testOnReturn}"></property>
       <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>
       <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>
       <!-- 监控数据库 -->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter" />
            </list> 
        </property>
       
   </bean>
   
   
   <!-- 数据源配置2 -->
    <bean id="salveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
       <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db2.jdbc.url}" /> 
       <property name="username" value="${db.login.name}"></property>
       <property name="password" value="${db.login.password}" />
       <property name="filters"  value="${db.filters}"></property>
       <property name="maxActive" value="${db.pool.maxActive}"></property>
       <property name="initialSize" value="${db.pool.initialSize}"></property>
       <property name="minIdle" value="${db.pool.minIdle}"></property>
       <property name="maxWait" value="${db.maxWait}"></property>    
       <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>
       <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>
       <property name="validationQuery" value="${db.validationQuery}"></property>
       <property name="testWhileIdle" value="${db.testWhileIdle}"></property>
       <property name="testOnBorrow" value="${db.testOnBorrow}"></property>
       <property name="testOnReturn" value="${db.testOnReturn}"></property>
       <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>
       <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>
       <!-- 监控数据库 -->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter" />
            </list> 
        </property>
       
   </bean>
   
   
   <!-- 编写spring 配置文件的配置多数源映射关系 -->
	<bean class="com.lyz.common.dynamic.DynamicDataSource" id="dataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="masterDataSource" key="masterDataSource"></entry>
				<entry value-ref="salveDataSource" key="salveDataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="salveDataSource">
		</property>
	</bean>
	
	
	 <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/lyz/**/model/mapping/*.xml"></property>
	</bean>	

	<!-- basedao使用 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 输出可执行的SQL-->
     <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true" />
      </bean>
      
      <bean id="dataSourceExchange" class="com.lyz.common.dynamic.DataSourceAspect"/>
    
	 <!-- 事务begin -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />
	<!-- 事务end -->
	<!-- 定义事务传播属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 对add、update、delete的方法进行事务-->
			<tx:method name="*InTrasaction" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<!-- 对剩余的方法进行事务-->
			<tx:method name="*" propagation="NOT_SUPPORTED"
				read-only="true" />			
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointCut" expression="execution(* com.lyz.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointCut"
			advice-ref="txAdvice" order="2" />
		<aop:advisor advice-ref="dataSourceExchange" pointcut-ref="transactionPointCut" order="1"/>
	</aop:config>	

	<context:component-scan base-package="com.lyz.*"/>  
	
</beans>